#!/bin/bash

#define commands for use with rails
#RAILS_CMDS=(rails rake rspec cucumber pickler)

function bungle_load_cmds {
  if [[ -z ${BUNGLER} ]]; then
    BUNGLER="rails rake"
    export BUNGLER
  fi
  BUNGLER_RAILS_CMDS=($BUNGLER)

  for i in "${BUNGLER_RAILS_CMDS[@]}"; do
    eval "function $i { bunglfy $i \$@; }"
  done
}


function check_exit {
  "$@" > /dev/null 2>&1
  echo $?
}

function _bungleable_command_not_found {
  echo "${CMD}: command not found..."
  return 127
}

function bunglfy {
  if [[ 0 -ne $(check_exit hash git) ]]; then
    echo "Bungler needs Git. So sorry."
    return 1
  fi
  CMD=$1
  GO=$@
  if [[ $(check_exit git rev-parse) -eq 0 ]]; then
    RAILPATH=$(git rev-parse --show-toplevel)
    if [[ -f ${RAILPATH}/bin/${CMD} ]]; then
      ${RAILPATH}/bin/${GO}
    elif [[ $(check_exit type -f ${CMD}) -eq 0 ]]; then
      shift
      $(type -P ${CMD}) $@
    else
      _bungleable_command_not_found
    fi
  elif [[ $(check_exit type -f ${CMD}) -eq 0 ]]; then
    ${GO}
  else
    _bungleable_command_not_found
  fi
}

function bungle {

  BUNGLECOM="${1}"
  case "$BUNGLECOM" in
    "list" | "-l" | "--list" )
      echo -e "Bungled commands: \n ${BUNGLER}"
      ;;
    "" )
      read -r -d '' DERP <<'EOF'
Bungler!
Usage: bungle [<command>] [<args>]

A little something like this:
  Command                            Example
  bungle list                        No.
  bungle add <bungled-command>       bungle add pickler
  bungle remove <bungled-command>    bungle remove pickler

EOF
      echo -e "$DERP"
      bungle_load_cmds
      ;;
    "reload" )
      bungle_load_cmds
      ;;
    "add" )
      if [[ ! $BUNGLER =~ "$2"  ]]; then
        export BUNGLER="$BUNGLER $2"
        bungle_load_cmds
      fi
      ;;
    "remove" )
      if [[ $BUNGLER =~ "$2"  ]]; then
        export BUNGLER=`echo $BUNGLER | sed "s/$2//"`
        bungle_load_cmds
      fi
      ;;
    * )
      ;;
  esac
}

bungle reload
